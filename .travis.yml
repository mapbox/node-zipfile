language: cpp

os:
  - linux
  - osx

compiler:
 - clang

env:
  matrix:
   - NODE_VERSION="0.10.36" JOBS=8
   - NODE_VERSION="0.12.0" JOBS=8
   - NODE_VERSION="iojs-v1.2.0" JOBS=8
   - NODE_VERSION="4.2.1" JOBS=8
  global:
   - secure: hBUfRqVPovL7PVOJONI8sakIUtggpM74qMPdi5zaMpJhuV/QWfROOVc05ULEr1P0Fra2WpQ62mp8lfa1NbB6sQfT/8Y6u0lucf9SsIUBJzDrSmfXv2NDgpJn9RQmfsZgLfDuTwRLVROkNSTowUq3tnhDIzX/NyB7uOp1TZNEJ8A=
   - secure: xWyq1Ys9lpMUVCh73q5YDDfC4nLeeydqIS4S+lJ/t/jUCNHDwe1x5XrxRIALi74qNmHg6eTcOeEW5iot/sf1oUJIA1oPt9iMIMolg9iYWJKWN4E6gWcIigYu9ZDl3GJsHyiNs/dVlZjzY1YKzyvgZ2MRfy4l0rPShCxROoCiCIM=

before_install:
 - COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
 - echo $COMMIT_MESSAGE
 - export PATH=`pwd`/node_modules/.bin:$PATH
 # here we set up the node version on the fly based on the matrix value.
 # This is done manually so that it is easy to flip the 'language' to
 # objective-c in another branch (to run the same travis.yml on OS X)
 - rm -rf ~/.nvm && git clone --depth 1 https://github.com/creationix/nvm.git ~/.nvm
 - source ~/.nvm/nvm.sh
 - nvm install $NODE_VERSION
 - nvm use $NODE_VERSION
 - node --version
 - npm --version
 - platform=$(uname -s | sed "y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/")
 - if [[ "$platform" == 'linux' ]]; then sudo apt-get install -y valgrind; fi;

install:
 # test building from source
 - npm install --build-from-source --clang=1
 - node-pre-gyp package testpackage
 - npm test
 - if [[ "$platform" == 'linux' ]]; then valgrind --leak-check=full --log-fd=1 node ./node_modules/.bin/_mocha | grep definitely; fi;
 # test unzipping large file
 - wget http://mapbox.s3.amazonaws.com/tmp/too-large.zip
 - node bench/largefile.js too-large.zip
 - time unzip -o too-large.zip
 - time dd if=/dev/urandom of=random.txt bs=1000000000 count=1
 - du -h *txt
 - time zip random.zip random.txt
 - time unzip -o random.zip
 - node bench/largefile.js random.zip

before_script:
 # test publishing and installing from remote if
 # [publish binary] is present in commit message
 - echo "before_script"
 - PUBLISH_BINARY=false
 - echo $COMMIT_MESSAGE
 - if test "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then echo yes;PUBLISH_BINARY=true; fi;
 - echo $PUBLISH_BINARY
 - if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp unpublish publish info; rm -rf {build,lib/binding}; npm install --fallback-to-build=false; npm test; fi

script:
 # test building with against shared libzip
 - rm -rf ./build
 - rm -rf ./lib/binding
 - if [[ "$platform" == 'linux' ]]; then sudo apt-get -qq install libzip-dev; npm install --build-from-source --shared_libzip  --clang=1; fi
 - if [[ "$platform" == 'darwin' ]]; then brew install libzip; npm install --build-from-source --shared_libzip --shared_libzip_includes=`brew --prefix`/include --shared_libzip_libpath=`brew --prefix`/lib  --clang=1; fi
 - npm test
